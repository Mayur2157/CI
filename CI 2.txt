pip install deap


import random
from deap import base, creator, tools, algorithms

def evaluate(individual):
    return random.random(),

POP_SIZE = 10
GENS = 5

creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)
toolbox = base.Toolbox()

toolbox.register("attr_neurons", random.randint, 10, 100)
toolbox.register("attr_layers", random.randint, 2, 5)
toolbox.register("individual", tools.initCycle, creator.Individual, (toolbox.attr_neurons, toolbox.attr_layers), n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

toolbox.register("evaluate", evaluate)
toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", tools.mutUniformInt, low=10, up=100, indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)

pop = toolbox.population(n=POP_SIZE)

for gen in range(GENS):
    off = algorithms.varAnd(pop, toolbox, cxpb=0.5, mutpb=0.1)
    fits = toolbox.map(toolbox.evaluate, off)
    for ind, fit in zip(off, fits):
        ind.fitness.values = fit
    pop = toolbox.select(off, k=len(pop))

best_indiv = tools.selBest(pop, k=1)[0]
best_params = best_indiv

print("Best Parameters (Neurons per layer, Number of layers):", best_params)
